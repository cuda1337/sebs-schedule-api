generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String
  role      String    @default("staff")
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

model Staff {
  id                    Int                  @id @default(autoincrement())
  name                  String
  locations             String[]
  availability          Json
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  role                  String?
  testDate              String?
  active                Boolean              @default(true)
  assignments           Assignment[]
  changeLogs            ChangeLog[]          @relation("ChangeLogStaff")
  newOverrides          DailyOverride[]      @relation("NewStaff")
  originalOverrides     DailyOverride[]      @relation("OriginalStaff")
  groupSessions         GroupSession[]
  originalReassignments ReassignmentNeeded[] @relation("ReassignmentOriginalStaff")
  plannedReassignments  ReassignmentNeeded[] @relation("ReassignmentPlannedStaff")
  dailyAssignmentStates DailyAssignmentState[]
}

model Client {
  id                  Int                  @id @default(autoincrement())
  name                String
  locations           String[]
  authorizedHours     Float                @default(0)
  availability        Json
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  assignments         Assignment[]
  changeLogs          ChangeLog[]          @relation("ChangeLogClient")
  supervisorHistory   ClientSupervisor[]
  newOverrides        DailyOverride[]      @relation("NewClient")
  originalOverrides   DailyOverride[]      @relation("OriginalClient")
  groupSessionClients GroupSessionClient[]
  lunchGroupClients   LunchGroupClient[]
  reassignmentsNeeded ReassignmentNeeded[]
}

model ScheduleVersion {
  id            Int            @id @default(autoincrement())
  name          String
  type          String
  status        String         @default("active")
  startDate     DateTime?
  description   String?
  createdBy     String         @default("system")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  assignments   Assignment[]
  changeLogs    ChangeLog[]
  groupSessions GroupSession[]

  @@index([type, status])
}

model Assignment {
  id             Int             @id @default(autoincrement())
  day            String
  block          String
  staffId        Int
  clientId       Int
  createdAt      DateTime        @default(now())
  groupSessionId Int?
  isGroup        Boolean         @default(false)
  updatedAt      DateTime        @updatedAt
  versionId      Int             @default(1)
  plannedDate    DateTime?
  location       String?
  client         Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  groupSession   GroupSession?   @relation(fields: [groupSessionId], references: [id])
  staff          Staff           @relation(fields: [staffId], references: [id], onDelete: Cascade)
  version        ScheduleVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)
  dailyAssignmentStates DailyAssignmentState[]

  @@index([versionId, day, block, staffId])
  @@index([versionId, day, block, clientId])
  @@index([staffId])
  @@index([clientId])
}

model GroupSession {
  id          Int                  @id @default(autoincrement())
  day         String
  block       String
  staffId     Int
  versionId   Int                  @default(1)
  location    String
  maxSize     Int                  @default(4)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  assignments Assignment[]
  staff       Staff                @relation(fields: [staffId], references: [id], onDelete: Cascade)
  version     ScheduleVersion      @relation(fields: [versionId], references: [id], onDelete: Cascade)
  clients     GroupSessionClient[]

  @@unique([versionId, day, block, staffId])
  @@index([versionId, day, block])
}

model GroupSessionClient {
  id             Int          @id @default(autoincrement())
  groupSessionId Int
  clientId       Int
  client         Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  groupSession   GroupSession @relation(fields: [groupSessionId], references: [id], onDelete: Cascade)

  @@unique([groupSessionId, clientId])
  @@index([clientId])
}

model ChangeLog {
  id               Int             @id @default(autoincrement())
  versionId        Int
  changeType       String
  entityType       String
  entityId         Int?
  day              String?
  block            String?
  staffId          Int?
  clientId         Int?
  previousValue    Json?
  newValue         Json?
  committedToMain  Boolean         @default(false)
  committedAt      DateTime?
  createdBy        String          @default("system")
  createdAt        DateTime        @default(now())
  notes            String?
  reviewed         Boolean         @default(false)
  reviewedAt       DateTime?
  reviewedBy       String?
  reviewedByUserId Int?
  createdByUserId  Int?
  client           Client?         @relation("ChangeLogClient", fields: [clientId], references: [id])
  staff            Staff?          @relation("ChangeLogStaff", fields: [staffId], references: [id])
  version          ScheduleVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)

  @@index([versionId, committedToMain])
  @@index([createdAt])
  @@index([staffId])
  @@index([clientId])
}

model DailyOverride {
  id               Int      @id @default(autoincrement())
  date             DateTime @db.Date
  type             String
  day              String
  block            String
  originalStaffId  Int?
  originalClientId Int?
  newStaffId       Int?
  newClientId      Int?
  reason           String
  status           String   @default("active")
  createdBy        String   @default("system")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  hours            Float?
  newClient        Client?  @relation("NewClient", fields: [newClientId], references: [id])
  newStaff         Staff?   @relation("NewStaff", fields: [newStaffId], references: [id])
  originalClient   Client?  @relation("OriginalClient", fields: [originalClientId], references: [id])
  originalStaff    Staff?   @relation("OriginalStaff", fields: [originalStaffId], references: [id])

  @@index([date, status])
  @@index([createdAt])
}

model ClientSupervisor {
  id             Int       @id @default(autoincrement())
  clientId       Int
  supervisorName String
  effectiveDate  DateTime  @db.Date
  endDate        DateTime? @db.Date
  createdBy      String    @default("system")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  client         Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId, effectiveDate])
  @@index([supervisorName])
  @@index([effectiveDate])
}

model ReassignmentNeeded {
  id                Int       @id @default(autoincrement())
  clientId          Int
  originalStaffId   Int?
  originalStaffName String
  day               String
  block             String
  location          String
  deletedAt         DateTime  @default(now())
  deletedBy         String
  status            String    @default("pending")
  plannedStaffId    Int?
  plannedDate       DateTime? @db.Date
  dismissedAt       DateTime?
  dismissedBy       String?
  dismissalReason   String?
  client            Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  originalStaff     Staff?    @relation("ReassignmentOriginalStaff", fields: [originalStaffId], references: [id])
  plannedStaff      Staff?    @relation("ReassignmentPlannedStaff", fields: [plannedStaffId], references: [id])

  @@index([status, location])
  @@index([status, day, block])
  @@index([clientId])
  @@index([deletedAt])
}

model LunchSchedule {
  id                        Int              @id @default(autoincrement())
  date                      DateTime         @db.Date
  location                  String           @db.VarChar(100)
  isFinalized               Boolean          @default(false)
  finalizedBy               String?          @db.VarChar(100)
  finalizedAt               DateTime?        @db.Timestamp(6)
  modifiedAfterFinalization Boolean          @default(false)
  lastModifiedBy            String?          @db.VarChar(100)
  lastModifiedAt            DateTime?        @db.Timestamp(6)
  createdBy                 String           @db.VarChar(100)
  createdAt                 DateTime         @default(now()) @db.Timestamp(6)
  updatedAt                 DateTime         @default(now()) @updatedAt @db.Timestamp(6)
  manuallyMovedToAvailable  Int[]            @default([])
  manualStayWithStaff       Int[]            @default([])
  excludedClients           Int[]            @default([])
  timeBlocks                LunchTimeBlock[]

  @@unique([date, location])
  @@index([date], map: "idx_lunch_schedule_date")
  @@index([isFinalized], map: "idx_lunch_schedule_finalized")
  @@index([location], map: "idx_lunch_schedule_location")
}

model LunchTimeBlock {
  id              Int           @id @default(autoincrement())
  lunchScheduleId Int
  startTime       String        @db.VarChar(10)
  endTime         String        @db.VarChar(10)
  label           String?       @db.VarChar(50)
  createdAt       DateTime      @default(now()) @db.Timestamp(6)
  updatedAt       DateTime      @default(now()) @updatedAt @db.Timestamp(6)
  groups          LunchGroup[]
  lunchSchedule   LunchSchedule @relation(fields: [lunchScheduleId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([lunchScheduleId], map: "idx_lunch_time_block_schedule")
}

model LunchGroup {
  id           Int                @id @default(autoincrement())
  timeBlockId  Int
  primaryStaff String             @db.VarChar(100)
  helpers      String[]           @default([])
  roomLocation String?            @db.VarChar(100)
  groupName    String?            @db.VarChar(50)
  color        String?            @default("#3B82F6") @db.VarChar(20)
  createdAt    DateTime           @default(now()) @db.Timestamp(6)
  updatedAt    DateTime           @default(now()) @updatedAt @db.Timestamp(6)
  startTime    String?
  endTime      String?
  timeBlock    LunchTimeBlock     @relation(fields: [timeBlockId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  clients      LunchGroupClient[]

  @@index([timeBlockId], map: "idx_lunch_group_time_block")
}

model LunchGroupClient {
  id                   Int        @id @default(autoincrement())
  lunchGroupId         Int
  clientId             Int
  hasAfternoonSession  Boolean    @default(false)
  afternoonSessionNote String?    @db.VarChar(200)
  displayOrder         Int?       @default(0)
  createdAt            DateTime   @default(now()) @db.Timestamp(6)
  client               Client     @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  lunchGroup           LunchGroup @relation(fields: [lunchGroupId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([lunchGroupId, clientId])
  @@index([clientId], map: "idx_lunch_group_client_client")
  @@index([lunchGroupId], map: "idx_lunch_group_client_group")
}

model ScheduleGroup {
  id         Int                   @id @default(autoincrement())
  name       String
  timeBlock  String
  date       DateTime              @db.Date
  staffId    Int
  location   String
  maxClients Int                   @default(6)
  createdBy  String                @default("user")
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
  members    ScheduleGroupMember[]

  @@index([date, timeBlock])
  @@index([staffId])
  @@index([date, location])
}

model ScheduleGroupMember {
  id                Int           @id @default(autoincrement())
  groupId           Int
  clientId          Int
  originalStaffId   Int?
  originalSessionId Int?
  createdAt         DateTime      @default(now())
  group             ScheduleGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, clientId])
  @@index([groupId])
  @@index([clientId])
}

model DailyScheduleState {
  id             Int      @id @default(autoincrement())
  date           DateTime @unique @db.Date
  staffPositions Json
  sessions       Json
  clientStates   Json
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  auditLog       Json     @default("[]")
}

model DailyAssignmentState {
  id              Int        @id @default(autoincrement())
  date            DateTime   @db.Date
  assignmentId    Int
  currentStaffId  Int?
  
  assignment      Assignment @relation(fields: [assignmentId], references: [id])
  currentStaff    Staff?     @relation(fields: [currentStaffId], references: [id])
  
  @@unique([date, assignmentId])
  @@index([date])
}

model SessionReview {
  id                   Int      @id @default(autoincrement())
  date                 DateTime @db.Date
  sessionId            String
  reviewedAt           DateTime
  reviewedBy           String
  sessionStateAtReview Json
  createdAt            DateTime @default(now())

  @@unique([date, sessionId])
  @@index([date])
  @@index([reviewedAt])
}
